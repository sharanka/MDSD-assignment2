/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.student.shsha15.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.student.shsha15.mathInterpreter.MathExp
import javax.swing.JOptionPane
import dk.sdu.student.shsha15.mathInterpreter.Plus
import dk.sdu.student.shsha15.mathInterpreter.Minus
import dk.sdu.student.shsha15.mathInterpreter.Expression
import dk.sdu.student.shsha15.mathInterpreter.Multiply
import dk.sdu.student.shsha15.mathInterpreter.Divide
import dk.sdu.student.shsha15.mathInterpreter.Parenthesis
import dk.sdu.student.shsha15.mathInterpreter.Number

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathInterpreterGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression: " + math.display)
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Expression expression) {
		switch expression {
			Plus: expression.left.computeExp + expression.right.computeExp
			Minus: expression.left.computeExp - expression.right.computeExp
			Multiply: expression.left.computeExp * expression.right.computeExp
			Divide: expression.left.computeExp / expression.right.computeExp
			default: throw new Error('Invalid Expression')
		}
	}

	def CharSequence display(MathExp math) { 
		'''Math[math.exp.displayExp]'''
	}

	def CharSequence displayExp(Expression expression) {
		'''Expression[«expression.left.displayExpression»,«expression.operator.displayOperation»,«expression.right.displayExpression»]'''
	} 
	
	def CharSequence displayExpression(Number number){
		'''«number.value»'''
	}
	
	def CharSequence displayExpression(Parenthesis parenthesis) {
		'''«parenthesis.exp.displayExpression»'''
	}
	
	def CharSequence displayOperation(Expression expression) {
		switch expression {
		Plus: '''+'''
		Minus: '''-'''
		Multiply: '''*'''
		Divide: '''/'''
		}
	}	
}
	
