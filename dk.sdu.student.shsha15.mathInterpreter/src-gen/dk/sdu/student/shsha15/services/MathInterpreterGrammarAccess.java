/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.student.shsha15.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathInterpreterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.MathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//MathExp:
		//	'result' 'is' exp=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//'result' 'is' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'result'
		public Keyword getResultKeyword_0() { return cResultKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.Exp");
		private final RuleCall cPlusMinusExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Exp Expression:
		//	PlusMinusExp;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusMinusExp
		public RuleCall getPlusMinusExpParserRuleCall() { return cPlusMinusExpParserRuleCall; }
	}
	public class PlusMinusExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.PlusMinusExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyDivideExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPlusMinusOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplyDivideExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusMinusExp Expression:
		//	MultiplyDivideExp ({Exp.left=current} operator=PlusMinusOperator right=MultiplyDivideExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplyDivideExp ({Exp.left=current} operator=PlusMinusOperator right=MultiplyDivideExp)*
		public Group getGroup() { return cGroup; }
		
		//MultiplyDivideExp
		public RuleCall getMultiplyDivideExpParserRuleCall_0() { return cMultiplyDivideExpParserRuleCall_0; }
		
		//({Exp.left=current} operator=PlusMinusOperator right=MultiplyDivideExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exp.left=current}
		public Action getExpLeftAction_1_0() { return cExpLeftAction_1_0; }
		
		//operator=PlusMinusOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//PlusMinusOperator
		public RuleCall getOperatorPlusMinusOperatorParserRuleCall_1_1_0() { return cOperatorPlusMinusOperatorParserRuleCall_1_1_0; }
		
		//right=MultiplyDivideExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplyDivideExp
		public RuleCall getRightMultiplyDivideExpParserRuleCall_1_2_0() { return cRightMultiplyDivideExpParserRuleCall_1_2_0; }
	}
	public class MultiplyDivideExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.MultiplyDivideExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplyDivideOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplyDivideExp Expression:
		//	Primary ({Exp.left=current} operator=MultiplyDivideOperator right=Primary);
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Exp.left=current} operator=MultiplyDivideOperator right=Primary)
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Exp.left=current} operator=MultiplyDivideOperator right=Primary)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exp.left=current}
		public Action getExpLeftAction_1_0() { return cExpLeftAction_1_0; }
		
		//operator=MultiplyDivideOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplyDivideOperator
		public RuleCall getOperatorMultiplyDivideOperatorParserRuleCall_1_1_0() { return cOperatorMultiplyDivideOperatorParserRuleCall_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary Expression:
		//	Number | Parenthesis;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_1() { return cParenthesisParserRuleCall_1; }
	}
	public class PlusMinusOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.PlusMinusOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PlusMinusOperator Expression:
		//	{Plus} '+' | {Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+' | {Minus} '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Plus} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Plus}
		public Action getPlusAction_0_0() { return cPlusAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{Minus} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minus}
		public Action getMinusAction_1_0() { return cMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class MultiplyDivideOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.MultiplyDivideOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultiplyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDivideAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//MultiplyDivideOperator Expression:
		//	{Multiply} '*' | {Divide} '/';
		@Override public ParserRule getRule() { return rule; }
		
		//{Multiply} '*' | {Divide} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Multiply} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Multiply}
		public Action getMultiplyAction_0_0() { return cMultiplyAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{Divide} '/'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Divide}
		public Action getDivideAction_1_0() { return cDivideAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Number Expression:
		//	{Num} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT
		public Group getGroup() { return cGroup; }
		
		//{Num}
		public Action getNumAction_0() { return cNumAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.student.shsha15.MathInterpreter.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis Expression:
		//	'(' exp=Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Exp ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_0() { return cExpExpParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private final MathExpElements pMathExp;
	private final ExpElements pExp;
	private final PlusMinusExpElements pPlusMinusExp;
	private final MultiplyDivideExpElements pMultiplyDivideExp;
	private final PrimaryElements pPrimary;
	private final PlusMinusOperatorElements pPlusMinusOperator;
	private final MultiplyDivideOperatorElements pMultiplyDivideOperator;
	private final NumberElements pNumber;
	private final ParenthesisElements pParenthesis;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathInterpreterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMathExp = new MathExpElements();
		this.pExp = new ExpElements();
		this.pPlusMinusExp = new PlusMinusExpElements();
		this.pMultiplyDivideExp = new MultiplyDivideExpElements();
		this.pPrimary = new PrimaryElements();
		this.pPlusMinusOperator = new PlusMinusOperatorElements();
		this.pMultiplyDivideOperator = new MultiplyDivideOperatorElements();
		this.pNumber = new NumberElements();
		this.pParenthesis = new ParenthesisElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.student.shsha15.MathInterpreter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MathExp:
	//	'result' 'is' exp=Exp;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//Exp Expression:
	//	PlusMinusExp;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//PlusMinusExp Expression:
	//	MultiplyDivideExp ({Exp.left=current} operator=PlusMinusOperator right=MultiplyDivideExp)*;
	public PlusMinusExpElements getPlusMinusExpAccess() {
		return pPlusMinusExp;
	}
	
	public ParserRule getPlusMinusExpRule() {
		return getPlusMinusExpAccess().getRule();
	}
	
	//MultiplyDivideExp Expression:
	//	Primary ({Exp.left=current} operator=MultiplyDivideOperator right=Primary);
	public MultiplyDivideExpElements getMultiplyDivideExpAccess() {
		return pMultiplyDivideExp;
	}
	
	public ParserRule getMultiplyDivideExpRule() {
		return getMultiplyDivideExpAccess().getRule();
	}
	
	//Primary Expression:
	//	Number | Parenthesis;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//PlusMinusOperator Expression:
	//	{Plus} '+' | {Minus} '-';
	public PlusMinusOperatorElements getPlusMinusOperatorAccess() {
		return pPlusMinusOperator;
	}
	
	public ParserRule getPlusMinusOperatorRule() {
		return getPlusMinusOperatorAccess().getRule();
	}
	
	//MultiplyDivideOperator Expression:
	//	{Multiply} '*' | {Divide} '/';
	public MultiplyDivideOperatorElements getMultiplyDivideOperatorAccess() {
		return pMultiplyDivideOperator;
	}
	
	public ParserRule getMultiplyDivideOperatorRule() {
		return getMultiplyDivideOperatorAccess().getRule();
	}
	
	//Number Expression:
	//	{Num} value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Parenthesis Expression:
	//	'(' exp=Exp ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
