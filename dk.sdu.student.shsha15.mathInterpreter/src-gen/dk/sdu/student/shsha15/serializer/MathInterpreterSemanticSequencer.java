/*
 * generated by Xtext 2.21.0
 */
package dk.sdu.student.shsha15.serializer;

import com.google.inject.Inject;
import dk.sdu.student.shsha15.mathInterpreter.Divide;
import dk.sdu.student.shsha15.mathInterpreter.Exp;
import dk.sdu.student.shsha15.mathInterpreter.Expression;
import dk.sdu.student.shsha15.mathInterpreter.MathExp;
import dk.sdu.student.shsha15.mathInterpreter.MathInterpreterPackage;
import dk.sdu.student.shsha15.mathInterpreter.Minus;
import dk.sdu.student.shsha15.mathInterpreter.Multiply;
import dk.sdu.student.shsha15.mathInterpreter.Num;
import dk.sdu.student.shsha15.mathInterpreter.Plus;
import dk.sdu.student.shsha15.services.MathInterpreterGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathInterpreterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathInterpreterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathInterpreterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathInterpreterPackage.DIVIDE:
				sequence_MultiplyDivideOperator(context, (Divide) semanticObject); 
				return; 
			case MathInterpreterPackage.EXP:
				if (rule == grammarAccess.getMultiplyDivideExpRule()) {
					sequence_MultiplyDivideExp(context, (Exp) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpRule()
						|| rule == grammarAccess.getPlusMinusExpRule()
						|| action == grammarAccess.getPlusMinusExpAccess().getExpLeftAction_1_0()) {
					sequence_MultiplyDivideExp_PlusMinusExp(context, (Exp) semanticObject); 
					return; 
				}
				else break;
			case MathInterpreterPackage.EXPRESSION:
				sequence_Parenthesis(context, (Expression) semanticObject); 
				return; 
			case MathInterpreterPackage.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case MathInterpreterPackage.MINUS:
				sequence_PlusMinusOperator(context, (Minus) semanticObject); 
				return; 
			case MathInterpreterPackage.MULTIPLY:
				sequence_MultiplyDivideOperator(context, (Multiply) semanticObject); 
				return; 
			case MathInterpreterPackage.NUM:
				sequence_Number(context, (Num) semanticObject); 
				return; 
			case MathInterpreterPackage.PLUS:
				sequence_PlusMinusOperator(context, (Plus) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyDivideExp returns Exp
	 *
	 * Constraint:
	 *     (left=MultiplyDivideExp_Exp_1_0 operator=MultiplyDivideOperator right=Primary)
	 */
	protected void sequence_MultiplyDivideExp(ISerializationContext context, Exp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXP__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXP__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplyDivideExpAccess().getExpLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplyDivideExpAccess().getOperatorMultiplyDivideOperatorParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplyDivideExpAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Exp
	 *     PlusMinusExp returns Exp
	 *     PlusMinusExp.Exp_1_0 returns Exp
	 *
	 * Constraint:
	 *     (
	 *         (left=PlusMinusExp_Exp_1_0 operator=PlusMinusOperator right=MultiplyDivideExp) | 
	 *         (left=MultiplyDivideExp_Exp_1_0 operator=MultiplyDivideOperator right=Primary)
	 *     )
	 */
	protected void sequence_MultiplyDivideExp_PlusMinusExp(ISerializationContext context, Exp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyDivideOperator returns Divide
	 *
	 * Constraint:
	 *     {Divide}
	 */
	protected void sequence_MultiplyDivideOperator(ISerializationContext context, Divide semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyDivideOperator returns Multiply
	 *
	 * Constraint:
	 *     {Multiply}
	 */
	protected void sequence_MultiplyDivideOperator(ISerializationContext context, Multiply semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyDivideExp.Exp_1_0 returns Num
	 *     Primary returns Num
	 *     Number returns Num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyDivideExp.Exp_1_0 returns Expression
	 *     Primary returns Expression
	 *     Parenthesis returns Expression
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpExpParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlusMinusOperator returns Minus
	 *
	 * Constraint:
	 *     {Minus}
	 */
	protected void sequence_PlusMinusOperator(ISerializationContext context, Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlusMinusOperator returns Plus
	 *
	 * Constraint:
	 *     {Plus}
	 */
	protected void sequence_PlusMinusOperator(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
